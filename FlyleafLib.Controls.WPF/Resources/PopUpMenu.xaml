<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:collections="clr-namespace:System.Collections;assembly=mscorlib"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/FlyleafLib.Controls.WPF;component/Resources/MaterialDesign.xaml" />
        <ResourceDictionary Source="pack://application:,,,/FlyleafLib.Controls.WPF;component/Resources/Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style
        x:Key="MaterialDesignMenuItem"
        BasedOn="{x:Null}"
        TargetType="{x:Type MenuItem}">
        <Setter Property="Padding" Value="10,0,10,0" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <ControlTemplate.Resources>
                        <Style TargetType="materialDesign:PackIcon">
                            <Setter Property="FrameworkElement.Width" Value="16" />
                            <Setter Property="FrameworkElement.Height" Value="16" />
                            <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidBrush}" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid ClipToBounds="True">
                        <Border
                            x:Name="templateRoot"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True" />
                        <Border
                            x:Name="BackgroundRoot"
                            Background="{DynamicResource PrimaryHueMidBrush}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Opacity="0"
                            SnapsToDevicePixels="True" />
                        <materialDesign:Ripple
                            HorizontalContentAlignment="Stretch"
                            VerticalContentAlignment="Stretch"
                            Background="Transparent"
                            Feedback="{TemplateBinding Foreground,
                                                       Converter={StaticResource BrushRoundConverter}}"
                            Focusable="False">
                            <Grid Height="{TemplateBinding Height}" Background="Transparent">
                                <Grid
                                    Margin="{TemplateBinding Padding}"
                                    VerticalAlignment="Center"
                                    Background="Transparent">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="IconGroup" />
                                        <ColumnDefinition Width="*" SharedSizeGroup="HeaderGroup" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid
                                        x:Name="IconWrapper"
                                        Width="40"
                                        Margin="0,0,-10,0"
                                        Visibility="Visible">
                                        <ContentPresenter
                                            x:Name="Icon"
                                            Width="16"
                                            Height="16"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Center"
                                            Content="{TemplateBinding Icon}"
                                            ContentSource="Icon"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                    <Grid
                                        x:Name="GlyphWrapper"
                                        Width="40"
                                        Margin="0,0,-10,0"
                                        Visibility="Collapsed">
                                        <Viewbox
                                            x:Name="GlyphPanel"
                                            Width="16"
                                            Height="16"
                                            Margin="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Center"
                                            FlowDirection="LeftToRight"
                                            Visibility="Collapsed">
                                            <Canvas Width="24" Height="24">
                                                <Path
                                                    x:Name="Glyph"
                                                    Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"
                                                    Fill="{DynamicResource SecondaryHueMidBrush}"
                                                    FlowDirection="LeftToRight" />
                                            </Canvas>
                                        </Viewbox>
                                    </Grid>
                                    <Grid Grid.Column="1">
                                        <ContentPresenter
                                            x:Name="BoldHeaderPresenter"
                                            VerticalAlignment="Center"
                                            Content="{TemplateBinding Header}"
                                            ContentSource="Header"
                                            ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                                            RecognizesAccessKey="True"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            TextBlock.FontWeight="Bold"
                                            Visibility="Hidden" />
                                        <ContentPresenter
                                            x:Name="HeaderPresenter"
                                            VerticalAlignment="Center"
                                            Content="{TemplateBinding Header}"
                                            ContentSource="Header"
                                            ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                                            RecognizesAccessKey="True"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                    <Grid
                                        x:Name="InputGestureTextWrapper"
                                        Grid.Column="2"
                                        Visibility="Collapsed">
                                        <TextBlock
                                            Margin="16,0,0,0"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Center"
                                            Foreground="{TemplateBinding Foreground}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            Text="{TemplateBinding InputGestureText}"
                                            Visibility="{TemplateBinding InputGestureText,
                                                                         Converter={StaticResource StringIsEmptyVisibilityConverter}}" />
                                    </Grid>
                                    <Grid
                                        x:Name="SubBlock"
                                        Grid.Column="2"
                                        Margin="16,0,0,0"
                                        Visibility="Collapsed">
                                        <Path
                                            Width="5"
                                            Height="10"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Center"
                                            Data="M0,16 L8,8 L0,0 Z"
                                            Fill="{DynamicResource SecondaryHueMidBrush}"
                                            SnapsToDevicePixels="False"
                                            Stretch="Uniform" />
                                    </Grid>
                                </Grid>
                            </Grid>
                        </materialDesign:Ripple>
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                            Placement="Bottom"
                            PopupAnimation="Slide">
                            <Border
                                x:Name="SubMenuBorder"
                                Background="{DynamicResource MaterialDesignPaper}"
                                CornerRadius="6"
                                Effect="{DynamicResource MaterialDesignShadowDepth1}">

                                <Border Background="Transparent">
                                    <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid Margin="0,0,0,0" RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas
                                                Width="0"
                                                Height="0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Top">
                                                <Rectangle
                                                    x:Name="OpaqueRect"
                                                    Width="{Binding ActualWidth, ElementName=SubMenuBorder}"
                                                    Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                                                    Fill="{Binding Background, ElementName=SubMenuBorder}" />
                                            </Canvas>
                                            <ItemsPresenter
                                                x:Name="ItemsPresenter"
                                                Grid.IsSharedSizeScope="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--#region Roles Triggers-->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter TargetName="SubBlock" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Popup" Property="Placement" Value="Right" />
                            <Setter TargetName="PART_Popup" Property="VerticalOffset" Value="-16" />
                            <Setter Property="Height" Value="32" />
                            <Setter TargetName="BoldHeaderPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="Height" Value="32" />
                            <Setter TargetName="InputGestureTextWrapper" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BoldHeaderPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Grid.IsSharedSizeScope" Value="True" />
                            <Setter Property="Padding" Value="16,0" />
                            <Setter Property="Height" Value="48" />
                            <Setter TargetName="templateRoot" Property="CornerRadius" Value="6" />
                            <Setter TargetName="BackgroundRoot" Property="CornerRadius" Value="6" />
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="16,0" />
                            <Setter Property="Height" Value="48" />
                            <Setter TargetName="templateRoot" Property="CornerRadius" Value="6" />
                            <Setter TargetName="BackgroundRoot" Property="CornerRadius" Value="6" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role" Value="TopLevelHeader" />
                                <Condition Property="IsSubmenuOpen" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="HeaderPresenter" Property="TextBlock.FontWeight" Value="Bold" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <!--#endregion-->

                        <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                            <Setter TargetName="SubMenuBorder" Property="Margin" Value="5" />
                        </Trigger>

                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="IconWrapper" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsCheckable" Value="True">
                            <Setter TargetName="GlyphWrapper" Property="Visibility" Value="Visible" />
                            <Setter TargetName="IconWrapper" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="BackgroundRoot" Property="Opacity" Value="0.13" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".56" />
                        </Trigger>
                        <Trigger SourceName="SubMenuScrollViewer" Property="CanContentScroll" Value="False">
                            <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}" />
                            <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignMenu" TargetType="{x:Type MenuBase}">
        <Style.Resources>
            <Style BasedOn="{StaticResource MaterialDesignMenuItem}" TargetType="MenuItem" />
        </Style.Resources>

        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="FontFamily" Value="{StaticResource MaterialDesignFont}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="TextBlock.FontSize" Value="15" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuBase}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="FlyleafContextMenu"
        BasedOn="{StaticResource MaterialDesignMenu}"
        TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuBase}">
                    <AdornerDecorator>
                        <Grid>
                            <Border
                                Margin="0"
                                Background="{TemplateBinding Background}"
                                CornerRadius="6"
                                Effect="{DynamicResource MaterialDesignShadowDepth1}" />

                            <Border Margin="0" Background="Transparent">
                                <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <Grid Margin="0,0" RenderOptions.ClearTypeHint="Enabled">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            Grid.IsSharedSizeScope="True"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Grid>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Popup Menu  -->
    <collections:ArrayList x:Key="MenuAudioStreams">
        <MenuItem Header="Embedded" ItemsSource="{Binding Player.Audio.Streams}">
            <MenuItem.ItemContainerStyle>
                <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                    <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                    <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}" />
                    <Setter Property="IsCheckable" Value="True" />
                    <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}" />
                </Style>
            </MenuItem.ItemContainerStyle>
            <MenuItem.ItemTemplate>
                <DataTemplate>
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding StringFormat=" #{0} ({1}) {2} @{3}Hz [CH: {4}] [Bits: {5}]">
                                <Binding Path="StreamIndex" />
                                <Binding Path="Language" />
                                <Binding Path="SampleFormatStr" />
                                <Binding Path="SampleRate" />
                                <Binding Path="Channels" />
                                <Binding Path="Bits" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </DataTemplate>
            </MenuItem.ItemTemplate>
        </MenuItem>
        <MenuItem Header="External" ItemsSource="{Binding Player.Playlist.Selected.ExternalAudioStreams}">
            <MenuItem.ItemContainerStyle>
                <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                    <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                    <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}" />
                    <Setter Property="IsCheckable" Value="True" />
                    <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}" />
                </Style>
            </MenuItem.ItemContainerStyle>
            <MenuItem.ItemTemplate>
                <DataTemplate>
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding StringFormat=" ({0}) {1} [BitRate: {2}] [{3}]">
                                <Binding Path="Language" />
                                <Binding Path="Codec" />
                                <Binding Path="BitRate" />
                                <Binding Path="Protocol" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </DataTemplate>
            </MenuItem.ItemTemplate>
        </MenuItem>
    </collections:ArrayList>
    <collections:ArrayList x:Key="MenuVideoStreams" x:Shared="False">
        <MenuItem Header="Embedded" ItemsSource="{Binding Player.Video.Streams}">
            <MenuItem.ItemContainerStyle>
                <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                    <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                    <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}" />
                    <Setter Property="IsCheckable" Value="True" />
                    <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}" />
                </Style>
            </MenuItem.ItemContainerStyle>
            <MenuItem.ItemTemplate>
                <DataTemplate>
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding StringFormat=" {0}x{1} @{2:#,#.00} ({3}/{4})">
                                <Binding Path="Width" />
                                <Binding Path="Height" />
                                <Binding Path="FPS" />
                                <Binding Path="Codec" />
                                <Binding Path="PixelFormatStr" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </DataTemplate>
            </MenuItem.ItemTemplate>
        </MenuItem>
        <MenuItem Header="External" ItemsSource="{Binding Player.Playlist.Selected.ExternalVideoStreams}">
            <MenuItem.ItemContainerStyle>
                <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                    <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                    <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}" />
                    <Setter Property="IsCheckable" Value="True" />
                    <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}" />
                </Style>
            </MenuItem.ItemContainerStyle>
            <MenuItem.ItemTemplate>
                <DataTemplate>
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding StringFormat=" {0}x{1} @{2} ({3}) [{4}]">
                                <Binding Path="Width" />
                                <Binding Path="Height" />
                                <Binding Path="FPS" />
                                <Binding Path="Codec" />
                                <Binding Path="Protocol" />
                                <!--<Binding Path="HasAudio"/>-->
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </DataTemplate>
            </MenuItem.ItemTemplate>
        </MenuItem>
    </collections:ArrayList>
    <collections:ArrayList x:Key="MenuSubtitlesStreams" x:Shared="False">
        <MenuItem Header="Embedded" ItemsSource="{Binding Player.Subtitles.Streams}">
            <MenuItem.ItemContainerStyle>
                <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                    <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                    <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}" />
                    <Setter Property="IsCheckable" Value="True" />
                    <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}" />
                </Style>
            </MenuItem.ItemContainerStyle>
            <MenuItem.ItemTemplate>
                <DataTemplate>
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding StringFormat=" [#{0}] {1}">
                                <Binding Path="StreamIndex" />
                                <Binding Path="Language" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </DataTemplate>
            </MenuItem.ItemTemplate>
        </MenuItem>
        <MenuItem Header="External" ItemsSource="{Binding Player.Playlist.Selected.ExternalSubtitlesStreams}">
            <MenuItem.ItemContainerStyle>
                <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                    <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Open, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                    <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}" />
                    <Setter Property="IsCheckable" Value="True" />
                    <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}" />
                </Style>
            </MenuItem.ItemContainerStyle>
            <MenuItem.ItemTemplate>
                <DataTemplate>
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding StringFormat=" ({0}) {1} {2}">
                                <Binding Path="Language" />
                                <Binding Path="Rating" />
                                <Binding Path="Title" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </DataTemplate>
            </MenuItem.ItemTemplate>
        </MenuItem>
    </collections:ArrayList>

    <ContextMenu x:Key="PopUpMenu" Style="{StaticResource FlyleafContextMenu}">
        <MenuItem
            Command="{Binding OpenFileDialog}"
            Header="Open File"
            Icon="{materialDesign:PackIcon FolderOutline}" />
        <MenuItem
            Command="{Binding Player.Commands.OpenFromClipboard}"
            Header="Paste Url"
            Icon="{materialDesign:PackIcon ContentPaste}"
            IsEnabled="{Binding CanPaste}" />
        <Separator />

        <MenuItem Icon="{materialDesign:PackIcon ViewList}" ItemsSource="{Binding Player.Playlist.Items}">
            <MenuItem.Header>
                <MultiBinding Converter="{StaticResource PlaylistItems}">
                    <Binding Path="Player.Playlist.Items.Count" />
                    <Binding Path="Player.Playlist.ExpectingItems" />
                </MultiBinding>
            </MenuItem.Header>

            <MenuItem.ItemContainerStyle>
                <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                    <Setter Property="Command" Value="{Binding DataContext.Player.Commands.Reopen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                    <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}" />
                    <Setter Property="IsCheckable" Value="True" />
                    <Setter Property="IsChecked" Value="{Binding Enabled, Mode=OneWay}" />
                    <Setter Property="Header" Value="{Binding Title}" />
                </Style>
            </MenuItem.ItemContainerStyle>
        </MenuItem>

        <Separator />

        <MenuItem Header="Audio" Icon="{materialDesign:PackIcon Kind=VolumeLow}">
            <MenuItem
                Header="Enabled"
                IsCheckable="True"
                IsChecked="{Binding Config.Audio.Enabled}" />
            <MenuItem Header="{Binding Config.Audio.Delay, Converter={StaticResource TicksToMilliSeconds}}" HeaderStringFormat="Delay ({0})">
                <MenuItem
                    Command="{Binding Player.Commands.AudioDelaySet}"
                    CommandParameter="0"
                    Header="Reset..." />
                <Separator />
                <MenuItem
                    Command="{Binding Player.Commands.AudioDelaySet2}"
                    CommandParameter="-10"
                    Header="-   10" />
                <MenuItem
                    Command="{Binding Player.Commands.AudioDelaySet2}"
                    CommandParameter="-100"
                    Header="-  100" />
                <MenuItem
                    Command="{Binding Player.Commands.AudioDelaySet2}"
                    CommandParameter="-1000"
                    Header="- 1000" />
                <MenuItem
                    Command="{Binding Player.Commands.AudioDelaySet2}"
                    CommandParameter="-10000"
                    Header="-10000" />
                <Separator />
                <MenuItem
                    Command="{Binding Player.Commands.AudioDelaySet2}"
                    CommandParameter="10000"
                    Header="+10000" />
                <MenuItem
                    Command="{Binding Player.Commands.AudioDelaySet2}"
                    CommandParameter="1000"
                    Header="+ 1000" />
                <MenuItem
                    Command="{Binding Player.Commands.AudioDelaySet2}"
                    CommandParameter="100"
                    Header="+  100" />
                <MenuItem
                    Command="{Binding Player.Commands.AudioDelaySet2}"
                    CommandParameter="10"
                    Header="+   10" />
            </MenuItem>
            <MenuItem Header="Streams" ItemsSource="{StaticResource MenuAudioStreams}" />
        </MenuItem>

        <MenuItem Header="Subtitles" Icon="{materialDesign:PackIcon Kind=CcOutline}">
            <MenuItem
                Header="Enabled"
                IsCheckable="True"
                IsChecked="{Binding Config.Subtitles.Enabled}" />
            <MenuItem Command="{Binding SetSubtitlesFont}" Header="Fonts..." />
            <MenuItem Header="{Binding Config.Subtitles.Delay, Converter={StaticResource TicksToMilliSeconds}}" HeaderStringFormat="Delay ({0})">
                <MenuItem
                    Command="{Binding Player.Commands.SubtitlesDelaySet}"
                    CommandParameter="0"
                    Header="Reset..." />
                <Separator />
                <MenuItem
                    Command="{Binding Player.Commands.SubtitlesDelaySet2}"
                    CommandParameter="-10"
                    Header="-   10" />
                <MenuItem
                    Command="{Binding Player.Commands.SubtitlesDelaySet2}"
                    CommandParameter="-100"
                    Header="-  100" />
                <MenuItem
                    Command="{Binding Player.Commands.SubtitlesDelaySet2}"
                    CommandParameter="-1000"
                    Header="- 1000" />
                <MenuItem
                    Command="{Binding Player.Commands.SubtitlesDelaySet2}"
                    CommandParameter="-10000"
                    Header="-10000" />
                <Separator />
                <MenuItem
                    Command="{Binding Player.Commands.SubtitlesDelaySet2}"
                    CommandParameter="10000"
                    Header="+10000" />
                <MenuItem
                    Command="{Binding Player.Commands.SubtitlesDelaySet2}"
                    CommandParameter="1000"
                    Header="+ 1000" />
                <MenuItem
                    Command="{Binding Player.Commands.SubtitlesDelaySet2}"
                    CommandParameter="100"
                    Header="+  100" />
                <MenuItem
                    Command="{Binding Player.Commands.SubtitlesDelaySet2}"
                    CommandParameter="10"
                    Header="+   10" />
            </MenuItem>
            <MenuItem Header="{Binding UIConfig.SubsMargin.Bottom}" HeaderStringFormat="Position Y ({0})">
                <MenuItem Command="{Binding ResetSubsPositionY}" Header="Reset..." />
                <Separator />
                <MenuItem
                    Command="{Binding SetSubsPositionY}"
                    CommandParameter="  2"
                    Header="Up" />
                <MenuItem
                    Command="{Binding SetSubsPositionY}"
                    CommandParameter=" 20"
                    Header="Up x 10" />
                <MenuItem
                    Command="{Binding SetSubsPositionY}"
                    CommandParameter="-20"
                    Header="Down x 10" />
                <MenuItem
                    Command="{Binding SetSubsPositionY}"
                    CommandParameter=" -2"
                    Header="Down" />
            </MenuItem>
            <MenuItem Header="Streams" ItemsSource="{StaticResource MenuSubtitlesStreams}" />
            <MenuItem
                Header="Search Local"
                IsCheckable="True"
                IsChecked="{Binding Config.Subtitles.SearchLocal}" />
            <MenuItem
                Header="Search Online"
                IsCheckable="True"
                IsChecked="{Binding Config.Subtitles.SearchOnline}" />
        </MenuItem>

        <MenuItem Header="Video" Icon="{materialDesign:PackIcon VideoOutline}">
            <MenuItem
                Header="Enabled"
                IsCheckable="True"
                IsChecked="{Binding Config.Video.Enabled}" />
            <MenuItem Header="Aspect Ratio">
                <MenuItem.ItemContainerStyle>
                    <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                        <Setter Property="Command" Value="{Binding DataContext.ChangeAspectRatio, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}" />
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="Chapters" ItemsSource="{Binding Player.Chapters}">
                <MenuItem.ItemContainerStyle>
                    <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
                        <Setter Property="Command" Value="{Binding DataContext.Player.Commands.SeekToChapter, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                        <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}" />
                    </Style>
                </MenuItem.ItemContainerStyle>
                <MenuItem.ItemTemplate>
                    <DataTemplate>
                        <TextBlock>
                            <TextBlock.Text>
                                <MultiBinding StringFormat=" [{0}] {1}">
                                    <Binding Converter="{StaticResource TicksToTime}" Path="StartTime" />
                                    <Binding Path="Title" />
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </DataTemplate>
                </MenuItem.ItemTemplate>
            </MenuItem>
            <MenuItem
                Header="HW Acceleration"
                IsCheckable="True"
                IsChecked="{Binding Config.Video.VideoAcceleration}" />
            <MenuItem
                Command="{Binding Player.Commands.ToggleRecording}"
                Header="Record"
                IsCheckable="True"
                IsChecked="{Binding Player.IsRecording, Mode=OneWay}" />
            <MenuItem Header="{Binding Player.Rotation}" HeaderStringFormat="Rotation ({0}°)">
                <MenuItem
                    Command="{Binding Player.Commands.RotationSet}"
                    CommandParameter="0"
                    Header="0°" />
                <MenuItem
                    Command="{Binding Player.Commands.RotationSet}"
                    CommandParameter="90"
                    Header="90°" />
                <MenuItem
                    Command="{Binding Player.Commands.RotationSet}"
                    CommandParameter="180"
                    Header="180°" />
                <MenuItem
                    Command="{Binding Player.Commands.RotationSet}"
                    CommandParameter="270"
                    Header="270°" />
            </MenuItem>
            <MenuItem
                Header="Reverse Playback"
                IsCheckable="True"
                IsChecked="{Binding Player.ReversePlayback}" />
            <MenuItem Header="{Binding Player.Speed}" HeaderStringFormat="Speed (x{0})">
                <MenuItem
                    Command="{Binding Player.Commands.SpeedSet}"
                    CommandParameter="8"
                    Header=" x 8" />
                <MenuItem
                    Command="{Binding Player.Commands.SpeedSet}"
                    CommandParameter="4"
                    Header=" x 4" />
                <MenuItem
                    Command="{Binding Player.Commands.SpeedSet}"
                    CommandParameter="2"
                    Header=" x 2" />
                <MenuItem
                    Command="{Binding Player.Commands.SpeedSet}"
                    CommandParameter="1.75"
                    Header=" x 1.75" />
                <MenuItem
                    Command="{Binding Player.Commands.SpeedSet}"
                    CommandParameter="1.50"
                    Header=" x 1.50" />
                <MenuItem
                    Command="{Binding Player.Commands.SpeedSet}"
                    CommandParameter="1.25"
                    Header=" x 1.25" />
                <MenuItem
                    Command="{Binding Player.Commands.SpeedSet}"
                    CommandParameter="1"
                    Header=" x 1" />
                <MenuItem
                    Command="{Binding Player.Commands.SpeedSet}"
                    CommandParameter="0.75"
                    Header=" x 0.75" />
                <MenuItem
                    Command="{Binding Player.Commands.SpeedSet}"
                    CommandParameter="0.50"
                    Header=" x 0.50" />
                <MenuItem
                    Command="{Binding Player.Commands.SpeedSet}"
                    CommandParameter="0.25"
                    Header=" x 0.25" />
            </MenuItem>
            <MenuItem Header="Streams" ItemsSource="{StaticResource MenuVideoStreams}" />

            <MenuItem
                Command="{Binding Player.Commands.TakeSnapshot}"
                Header="Take a Snapshot"
                Icon="{materialDesign:PackIcon Kind=PhotoCamera}" />
            <MenuItem
                Header="V.Sync"
                IsCheckable="True"
                IsChecked="{Binding Config.Video.VSync}" />
            <MenuItem Header="Zoom">
                <MenuItem Command="{Binding Player.Commands.ResetAll}" Header="Reset ..." />
                <MenuItem
                    Command="{Binding Player.Commands.ZoomIn}"
                    Header="Zoom In"
                    Icon="{materialDesign:PackIcon Kind=ZoomIn}" />
                <MenuItem
                    Command="{Binding Player.Commands.ZoomOut}"
                    Header="Zoom out"
                    Icon="{materialDesign:PackIcon Kind=ZoomOut}" />
            </MenuItem>
        </MenuItem>

        <Separator />
        <MenuItem
            Header="Show Debug"
            IsCheckable="True"
            IsChecked="{Binding ShowDebug}" />

        <Separator />
        <MenuItem
            Command="{Binding ExitApplication}"
            Header="Exit"
            Icon="{materialDesign:PackIcon ExitToApp}" />
    </ContextMenu>

</ResourceDictionary>