<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="MainDictionary.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Padding" Value="9,0"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <ControlTemplate.Resources>
                        <Style TargetType="materialDesign:PackIcon">
                            <Setter Property="Width" Value="16"/>
                            <Setter Property="Height" Value="16"/>
                            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid ClipToBounds="True">
                        <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"/>
                        <Border x:Name="BackgroundRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" SnapsToDevicePixels="True">
                            <Border.Background>
                                <TemplateBinding Property="Foreground">
                                    <TemplateBinding.Converter>
                                        <materialDesign:BrushRoundConverter HighValue="White" LowValue="Black"/>
                                    </TemplateBinding.Converter>
                                </TemplateBinding>
                            </Border.Background>
                        </Border>
                        <materialDesign:Ripple Background="Transparent" Focusable="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                            <materialDesign:Ripple.Feedback>
                                <TemplateBinding Property="Foreground">
                                    <TemplateBinding.Converter>
                                        <materialDesign:BrushRoundConverter HighValue="White" LowValue="Black"/>
                                    </TemplateBinding.Converter>
                                </TemplateBinding>
                            </materialDesign:Ripple.Feedback>
                            <Grid Background="Transparent" Height="{TemplateBinding Height}">
                                <Grid Background="Transparent" Margin="{TemplateBinding Padding}" VerticalAlignment="Center">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition SharedSizeGroup="IconGroup" Width="Auto"/>
                                        <ColumnDefinition SharedSizeGroup="HeaderGroup" Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid x:Name="IconWrapper" Visibility="Visible" Width="20">
                                        <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Left" Height="16" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                                    </Grid>
                                    <Grid x:Name="GlyphWrapper" Visibility="Collapsed" Width="20">
                                        <Viewbox x:Name="GlyphPanel" FlowDirection="LeftToRight" HorizontalAlignment="Left" Height="16" Margin="0" Visibility="Collapsed" VerticalAlignment="Center" Width="16">
                                            <Canvas Height="24" Width="24">
                                                <Path x:Name="Glyph" Data="M21,7L9,19 3.5,13.5 4.91,12.09 9,16.17 19.59,5.59 21,7z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight"/>
                                            </Canvas>
                                        </Viewbox>
                                    </Grid>
                                    <Grid Grid.Column="1">
                                        <ContentPresenter x:Name="BoldHeaderPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" TextElement.FontWeight="Bold" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Hidden" VerticalAlignment="Center"/>
                                        <ContentPresenter x:Name="HeaderPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                    </Grid>
                                    <Grid x:Name="InputGestureTextWrapper" Grid.Column="2" Visibility="Collapsed">
                                        <TextBlock Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Right" Margin="16,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center">
                                            <TextBlock.Visibility>
                                                <TemplateBinding Property="InputGestureText">
                                                    <TemplateBinding.Converter>
                                                        <materialDesign:TextFieldHintVisibilityConverter IsEmptyValue="Collapsed" IsNotEmptyValue="Visible"/>
                                                    </TemplateBinding.Converter>
                                                </TemplateBinding>
                                            </TextBlock.Visibility>
                                        </TextBlock>
                                    </Grid>
                                    <Grid x:Name="SubBlock" Grid.Column="2" Margin="16,0,0,0" Visibility="Collapsed">
                                        <Path Data="M0,16L8,8 0,0z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Right" Height="10" Stretch="Uniform" SnapsToDevicePixels="False" VerticalAlignment="Center" Width="5"/>
                                    </Grid>
                                </Grid>
                            </Grid>
                        </materialDesign:Ripple>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" CacheMode="{Binding (materialDesign:ShadowAssist.CacheMode), RelativeSource={RelativeSource Self}}" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="Slide" Placement="Bottom" VerticalOffset="-16">
                            <Border x:Name="SubMenuBorder" Background="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type MenuBase}}}" CornerRadius="2" Effect="{DynamicResource MaterialDesignShadowDepth1}">
                                <Border Background="Transparent">
                                    <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled" Margin="0,16">
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="Visibility" TargetName="SubBlock" Value="Visible"/>
                            <Setter Property="Placement" TargetName="PART_Popup" Value="Right"/>
                            <Setter Property="Height" Value="32"/>
                            <Setter Property="Visibility" TargetName="BoldHeaderPresenter" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="Height" Value="32"/>
                            <Setter Property="Visibility" TargetName="InputGestureTextWrapper" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="BoldHeaderPresenter" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
                            <Setter Property="Padding" Value="16,0"/>
                            <Setter Property="Height" Value="48"/>
                            <Setter Property="CornerRadius" TargetName="templateRoot" Value="2"/>
                            <Setter Property="CornerRadius" TargetName="BackgroundRoot" Value="2"/>
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="16,0"/>
                            <Setter Property="Height" Value="48"/>
                            <Setter Property="CornerRadius" TargetName="templateRoot" Value="2"/>
                            <Setter Property="CornerRadius" TargetName="BackgroundRoot" Value="2"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role" Value="TopLevelHeader"/>
                                <Condition Property="IsSubmenuOpen" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="TextElement.FontWeight" TargetName="HeaderPresenter" Value="Bold"/>
                        </MultiTrigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                            <Setter Property="Margin" TargetName="SubMenuBorder" Value="5"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="IconWrapper" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsCheckable" Value="True">
                            <Setter Property="Visibility" TargetName="GlyphWrapper" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="IconWrapper" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Opacity" TargetName="BackgroundRoot" Value="0.13"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ContextMenu x:Key="PopUpMenu">
        <MenuItem Header="Open File" Command="{Binding OpenFromFileDialog}" Icon="{materialDesign:PackIcon FolderOutline}"/>
        <MenuItem Header="Paste Url" Command="{Binding OpenFromPaste}" IsEnabled="{Binding CanPaste}" Icon="{materialDesign:PackIcon ContentPaste}"/>
        <Separator />

        <MenuItem Header="Audio" Icon="{materialDesign:PackIcon Audio}">
            <MenuItem Header="Enabled" IsCheckable="True" IsChecked="{Binding Audio.Enabled}"/>
            <MenuItem Header="{Binding Audio.DelayTicks, Converter={StaticResource TicksToMilliSeconds}}" HeaderStringFormat="Delay ({0})">
                <MenuItem Header="Reset..." Command="{Binding ResetAudioDelayMs}"/>
                <Separator />
                <MenuItem Header="-   10"   CommandParameter="-10"      Command="{Binding SetAudioDelayMs}"/>
                <MenuItem Header="-  100"   CommandParameter="-100"     Command="{Binding SetAudioDelayMs}"/>
                <MenuItem Header="- 1000"   CommandParameter="-1000"    Command="{Binding SetAudioDelayMs}"/>
                <MenuItem Header="-10000"   CommandParameter="-10000"   Command="{Binding SetAudioDelayMs}"/>
                <Separator />
                <MenuItem Header="+10000"   CommandParameter="10000"    Command="{Binding SetAudioDelayMs}"/>
                <MenuItem Header="+ 1000"   CommandParameter="1000"     Command="{Binding SetAudioDelayMs}"/>
                <MenuItem Header="+  100"   CommandParameter="100"      Command="{Binding SetAudioDelayMs}"/>
                <MenuItem Header="+   10"   CommandParameter="10"       Command="{Binding SetAudioDelayMs}"/>
            </MenuItem>
            <MenuItem Header="Streams">
                <MenuItem Header="Embedded" ItemsSource="{Binding Player.Plugins[Default].AudioStreams}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.OpenStream, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding InUse, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" #{0} ({1}) {2} @{3}Hz [CH: {4}] [Bits: {5}]">
                                        <Binding Path="StreamIndex"/>
                                        <Binding Path="Language"/>
                                        <Binding Path="SampleFormat"/>
                                        <Binding Path="SampleRate"/>
                                        <Binding Path="Channels"/>
                                        <Binding Path="Bits"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
                <MenuItem Header="YoutubeDL" ItemsSource="{Binding Player.Plugins[YoutubeDL].AudioStreams}">
                    <MenuItem.Style>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Player.Plugins[YoutubeDL].AudioStreams}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.OpenStream, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding InUse, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" ({0}) {1} [CH: {2}] [Bits: {3}]">
                                        <Binding Path="Language"/>
                                        <Binding Path="CodecName"/>
                                        <Binding Path="Channels"/>
                                        <Binding Path="Bits"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
            </MenuItem>
        </MenuItem>
        
        <MenuItem Header="Subtitles" Icon="{materialDesign:PackIcon SubtitlesOutline}">
            <MenuItem Header="Enabled" IsCheckable="True" IsChecked="{Binding Subs.Enabled}"/>
            <MenuItem Header="Fonts..." Command="{Binding SetSubtitlesFont}"/>
            <MenuItem Header="{Binding Subs.DelayTicks, Converter={StaticResource TicksToMilliSeconds}}" HeaderStringFormat="Delay ({0})">
                <MenuItem Header="Reset..." Command="{Binding ResetSubsDelayMs}"/>
                <Separator />
                <MenuItem Header="-   10"   CommandParameter="-10"      Command="{Binding SetSubsDelayMs}"/>
                <MenuItem Header="-  100"   CommandParameter="-100"     Command="{Binding SetSubsDelayMs}"/>
                <MenuItem Header="- 1000"   CommandParameter="-1000"    Command="{Binding SetSubsDelayMs}"/>
                <MenuItem Header="-10000"   CommandParameter="-10000"   Command="{Binding SetSubsDelayMs}"/>
                <Separator />
                <MenuItem Header="+10000"   CommandParameter="10000"    Command="{Binding SetSubsDelayMs}"/>
                <MenuItem Header="+ 1000"   CommandParameter="1000"     Command="{Binding SetSubsDelayMs}"/>
                <MenuItem Header="+  100"   CommandParameter="100"      Command="{Binding SetSubsDelayMs}"/>
                <MenuItem Header="+   10"   CommandParameter="10"       Command="{Binding SetSubsDelayMs}"/>
            </MenuItem>
            <MenuItem Header="{Binding Subtitles.Margin.Bottom}" HeaderStringFormat="Position Y ({0})">
                <MenuItem Header="Reset..." Command="{Binding ResetSubsPositionY}"/>
                <Separator />
                <MenuItem Header="Up"        CommandParameter="  2"     Command="{Binding SetSubsPositionY}"/>
                <MenuItem Header="Up x 10"   CommandParameter=" 20"     Command="{Binding SetSubsPositionY}"/>
                <MenuItem Header="Down x 10" CommandParameter="-20"     Command="{Binding SetSubsPositionY}"/>
                <MenuItem Header="Down"      CommandParameter=" -2"     Command="{Binding SetSubsPositionY}"/>
            </MenuItem>
            <MenuItem Header="Streams">
                <MenuItem Header="External" ItemsSource="{Binding Player.Plugins[DefaultExternal].SubtitlesStreams}" AlternationCount="{Binding Player.Plugins[DefaultExternal].SubtitlesStreams.Count}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.OpenStream, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding InUse, Mode=OneWay}"/>
                            <Setter Property="Header" Value="{Binding Url}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="Embedded" ItemsSource="{Binding Player.Plugins[Default].SubtitlesStreams}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.OpenStream, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding InUse, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" [#{0}] {1}">
                                        <Binding Path="StreamIndex"/>
                                        <Binding Path="Language"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
                <MenuItem Header="OpenSubtitles" ItemsSource="{Binding Player.Plugins[OpenSubtitles].SubtitlesStreams}">
                    <MenuItem.Style>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Player.Plugins[OpenSubtitles].SubtitlesStreams}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.OpenStream, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding InUse, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" ({0}) {1} {2}">
                                        <Binding Path="Language"/>
                                        <Binding Path="Rating"/>
                                        <Binding Path="UrlName"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="Use Online DBs" IsCheckable="True" IsChecked="{Binding Subs.UseOnlineDatabases}"/>
        </MenuItem>

        <MenuItem Header="Video" Icon="{materialDesign:PackIcon VideoOutline}">
            <MenuItem Header="Aspect Ratio">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                        <Setter Property="Command" Value="{Binding DataContext.ChangeAspectRatio, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}"/>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="HW Acceleration" IsCheckable="True" IsChecked="{Binding Decoder.HWAcceleration}"/>
            <MenuItem Header="Record" IsCheckable="True" IsChecked="{Binding IsRecording}"/>
            <MenuItem Header="Show GPU Usage"  IsCheckable="True" IsChecked="{Binding ShowGPUUsage}"/>
            <MenuItem Header="Streams">
                <MenuItem Header="Embedded" ItemsSource="{Binding Player.Plugins[Default].VideoStreams}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.OpenStream, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding InUse, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" {0}x{1} @{2:#,#.00} ({3}/{4})">
                                        <Binding Path="Width"/>
                                        <Binding Path="Height"/>
                                        <Binding Path="FPS"/>
                                        <Binding Path="CodecName"/>
                                        <Binding Path="PixelFormat"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
                <MenuItem Header="BitSwarm" ItemsSource="{Binding Player.Plugins[BitSwarm].VideoStreams}">
                    <MenuItem.Style>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Player.Plugins[BitSwarm].VideoStreams}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.OpenStream, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding InUse, Mode=OneWay}"/>
                            <Setter Property="Header" Value="{Binding Movie.Title}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="YoutubeDL" ItemsSource="{Binding Player.Plugins[YoutubeDL].VideoStreams}">
                    <MenuItem.Style>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Player.Plugins[YoutubeDL].VideoStreams}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Command" Value="{Binding DataContext.OpenStream, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ContextMenu}}"/>
                            <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked" Value="{Binding InUse, Mode=OneWay}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <TextBlock.Text>
                                    <MultiBinding StringFormat=" {0}x{1} @{2} ({3})">
                                        <Binding Path="Width"/>
                                        <Binding Path="Height"/>
                                        <Binding Path="FPS"/>
                                        <Binding Path="CodecName"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="Take a Snapshot" Command="{Binding TakeSnapshot}" Icon="{materialDesign:PackIcon Kind=PhotoCamera}"/>
            <MenuItem Header="V.Sync" IsCheckable="True" IsChecked="{Binding Video.VSync}"/>
            <MenuItem Header="Zoom">
                <MenuItem Header="Reset ..." Command="{Binding ZoomReset}"/>
                <MenuItem Header="Zoom In"   Command="{Binding Zoom}" CommandParameter="50"   Icon="{materialDesign:PackIcon Kind=ZoomIn}"/>
                <MenuItem Header="Zoom out"  Command="{Binding Zoom}" CommandParameter="-50"  Icon="{materialDesign:PackIcon Kind=ZoomOut}"/>
            </MenuItem>
            
        </MenuItem>

        <!--<Separator />
        <MenuItem Header="Media Info" Icon="{materialDesign:PackIcon InfoOutline}"/>-->
        
        <Separator />
        <MenuItem Header="Exit" Icon="{materialDesign:PackIcon ExitToApp}" Command="{Binding ExitApplication}"/>
    </ContextMenu>

</ResourceDictionary>